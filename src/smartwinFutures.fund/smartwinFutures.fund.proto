syntax = "proto3";

package smartwinFuturesFund;

service SmartwinFuturesFund {
  rpc GetOrders(Fund) returns (OrdersResponse) {}
  rpc GetTrades(Fund) returns (TradesResponse) {}
  rpc GetAccount(Fund) returns (Account) {}
  rpc GetPositions(Fund) returns (PositionsResponse) {}

  rpc GetPastOrders(PastRequest) returns (OrdersResponse) {}
  rpc GetPastTrades(PastRequest) returns (TradesResponse) {}
  rpc GetPastAccounts(PastRequest) returns (AccountsResponse) {}
  rpc GetPastPositions(PastRequest) returns (PositionsResponse) {}

  rpc GetLiveAccount(Fund) returns (Account) {}
  rpc GetLivePositions(Fund) returns (PositionsResponse) {}
  rpc GetNetValueAndEquityReport(Fund) returns (NetValueAndEquityReport) {}
  rpc GetNetValueAndEquityReports(Fund) returns (NetValueAndEquityReports) {}
  rpc GetPositionsLevelReport(Fund) returns (PositionsLevelReport) {}
  rpc GetPositionsLeverageReport(Fund) returns (PositionsLeverageReport) {}
  rpc GetAllPeriodsDrawdownReport(Fund) returns (AllPeriodsDrawdownReport) {}
  rpc GetCombinedReport(Fund) returns (CombinedReport) {}

  rpc PlaceOrder(PlaceOrderRequest) returns (PlaceOrderResponse) {}
  rpc CancelOrder(CancelOrderRequest) returns (Empty) {}

  rpc GetTradingday(Fund) returns (TradingdayResponse) {}

  rpc GetOrderStream(Fund) returns (stream Order) {}
  rpc GetTradeStream(Fund) returns (stream Trade) {}
  rpc GetAccountStream(Fund) returns (stream Account) {}
  rpc GetPositionsStream(Fund) returns (stream PositionsResponse) {}
  rpc GetTradingdayStream(Fund) returns (stream TradingdayResponse) {}
}

message Empty {
}

message Fund {
  string fundid = 1;
}

message TradingdayResponse {
  string tradingday = 1;
}

message PastRequest {
  string fundid = 1;
  string startDate = 2;
  string endDate = 3;
}

message OrdersResponse {
  repeated Order orders = 1;
}

message TradesResponse {
  repeated Trade trades = 1;
}

message AccountsResponse {
  repeated Account accounts = 1;
}

message PositionsResponse {
  repeated Position positions = 1;
}

message NetValueAndEquityReports {
  repeated NetValueAndEquityReport netValueAndEquityReports = 1;
}

message NetValueAndEquityReport {
  string fundid = 1;
  string tradingday = 2;
  Equity equity = 3;
  Netvalue netvalue = 4;
  string updatedate = 5;
}

message Equity {
  double last = 1;
  double open = 2;
  double high = 3;
  double low = 4;
  double close = 5;
  double settle = 6;
}

message Netvalue {
  double last = 1;
  double open = 2;
  double high = 3;
  double low = 4;
  double close = 5;
  double settle = 6;
  double dividend = 7;
  double inferior = 8;
  double returns = 9;
}
message PositionsLevelReport {
  double total = 1;
  double long = 2;
  double short = 3;
  double net = 4;
}

message PositionsLeverageReport {
  double total = 1;
}

message DrawdownReport {
  double peak = 1;
  double maxDrawdown = 2;
}

message AllPeriodsDrawdownReport {
  DrawdownReport history = 1;
  DrawdownReport today = 2;
}

message CombinedReport {
  NetValueAndEquityReport netValueAndEquityReport = 1;
  PositionsLevelReport positionsLevelReport = 2;
  PositionsLeverageReport positionsLeverageReport = 3;
  AllPeriodsDrawdownReport allPeriodsDrawdownReport = 4;
}

message PlaceOrderRequest {
  string fundid = 1; // 基金帐号
  string exchangeid = 2; // 交易所代码  ["SHFE", "上海期货交易所" ], [ "CZCE", "郑州商品交易所" ], [ "DCE", "大连商品交易所" ], [ "CFFEX", "中国金融期货交易所"]
  string brokerid = 3; // 经纪
  string instrumentid = 4; // 合约 "IF1608"
  string ordertype = 5; // 订单类型	["limitPrice":限价, "marketPrice":市价, "bestPrice":对手方最优, "lastPrice":最新价, "askPrice1":卖一价, "bidPrice1":买一价]
  string direction = 6; // 多空方向	["buy", "买入" ], [ "sell", "卖出" ]
  string offsetflag = 7; // 买卖标志	["open", "开仓" ], [ "close", "平仓" ]
  string hedgeflag = 8; // 套保	["speculation", "投机/非备兑" ], [ "hedge", "保值/备兑" ], [ "arbitrage", "套利" ]   我们只用到speculation
  double price = 9; // 委托价格
  int32 volume = 10; // 委托数量
  string donetype = 11; // 成交类型		[ "0", "GFD当日有效" ], [ "1", "FOK限价全成或全撤" ], [ "2", "FAK限价立即成交剩余撤销" ], [ "3", "IOC立即成交剩余自动撤销" ]  0 2 3有效。 2=3
  int32 seq = 12;
  string parentid	= 13; // 父基金帐号    */
  string strategyid = 14; // 策略标识      */
  string userid	= 15; // 操作人员标识  */
  string signalname	= 16; // "signal.name",*/
  string tradingday = 17;
  string requestid = 18;
}

message PlaceOrderResponse {
  string privateno = 1; // tdLive doOrder()的返回值
}

message CancelOrderRequest {
  string fundid = 1;
  string sessionid = 2;
  string instrumentid = 3;
  string privateno = 4;
  string orderid = 5;
}

message Order {
  string frontid = 1; // 只有ctp用到
  string sessionid = 2; // 连接id 撤单的时候用到
  string privateno = 3; // ctp.OrderRef / st.private_no
  string exchangeid = 4; // 市场代码	ctp.ExchangID / st.MarketCo
  string orderid = 5; // 委托流水号 ctp.OrderSysID / st.order_
  string tradingday = 6; // 交易日
  string fundid = 7; // 基金id
  string brokerid = 8; // 经纪
  string requestid = 9; // 请求id
  string instrumentid = 10; // 合约ID
  string direction = 11; // 多空
  string offsetflag = 12; // 开平标志
  string hedgeflag = 13; // 套保标志
  double price = 14; // 委托价格
  int32 volume = 15; // 委托数量
  string ordertype = 16; // 委托类型
  string orderstatus = 17; // 报单状态
  int32 volumetraded = 18; // 今成交数量
  string orderdate = 19; // 报单时间 报给期货公司
  string ordertime = 20; // 委托时间  期货公司给交易所
  int32 oerrno = 21; // 下单 撤单失败 下单-1   撤单-2  0成功
  string oerrmsg = 22; // 错误信息
  string updatetime = 23; // 最后修改时间
  string donetype = 24; //
  string pricetype = 25; //
  string canceltime = 26; //
  int32 seq = 27; //
  string parentid = 28; // 父基金帐号
  string strategyid = 29; // 策略标识
  string userid = 30; // 操作人员标识
  string signalname = 31; // "signal.name", 信号名称
  int32 donevol = 32;
  string statusmsg = 33;
  string updatedate = 34;
}

message Trade {
  string tradingday = 1; // 交易日  ctp.TradingDay/系统维护
  string fundid = 2; // 基金标识ctp.InvestorID/st.cell_id
  string requestid = 3; // 接口请求标识
  string brokerid = 4; // 期货经纪公司标识 ctp.BrokerID/st.cell_id
  string orderid = 5; // 委托报单编号 ctp.OrderSysID/st.order_no
  string tradeid = 6; // 成交编号 ctp.TradeID/st.trade_id
  string exchangeid = 7; // 交易所代码 ctp.ExchangeID/st.-1
  string instrumentid = 8; // 合约代码 ctp.InstrumentID/st.sec_code
  string direction = 9; // 买卖方向 ctp.Direction/st.bs
  string offsetflag = 10; // 开平标志 ctp.OffsetFlag/st.offset_flag
  string hedgeflag = 11; // 投机套保标志 ctp.HedgeFlag/st.hedge_flag
  double price = 12; // 成交价格 ctp.Price/st.done_price
  int32 volume = 13; // 成交数量 ctp.Volume/st.done_vol
  string tradedate = 14; // 成交时期yyyymmdd ctp.TradeDate/st.done_date
  string tradetime = 15; // 成交时间hh24miss ctp.TradeTime/st.done_time
  string updatedate = 16; // 纪录最新更新时间 time(NULL)
  int32	seq = 17; //
  string parentid = 18; // 父基金帐号
  string strategyid = 19; // 策略标识
  string userid = 20; // 操作人员标识
  string signalname = 21; // "signal.name" 信号名称 参加codemap.signal.nam
  string privateno = 22;
}

message Account {
  string tradingday = 1; // 交易日 ctp.TradingDay
  string fundid = 2; // 账户标识 ctp.AccountID/st.cell_id
  string parentid = 3; // 父基金帐号 默认0
  double capital = 4; // 资金（不含当日持仓盈亏）ctp.balance-ctp.positionprofit / st.deposite*/
  double prebalance = 5; // 昨日余额 ctp.PreBalance/st.dthis_bal
  double premargin = 6; // 上次占用的保证金 ctp.PreMargin/st.null
  string requestid = 7; // 接口请求标识
  double balance = 8; // 期货结算准备金 ctp.Balance/st.deposite
  double available = 9; // 可用资金 ctp.Available/st.available
  double margin = 10; // 当前保证金总额 ctp.CurrMargin/st.margin
  double incap = 11; // 入金金额 ctp.Deposit/st.incap
  double outcap = 12; // 出金金额 ctp.Withdraw/st.outcap
  double commission = 13; // 开仓手续费
  double closeprofit = 14; // 盯日平仓盈亏合计
  double positionprofit = 15; // 盯日持仓盈亏合计
  string updatedate = 16; // 信息更新日期
}

message Position {
  string tradingday = 1; // 交易日 ctp.TradingDay
  string fundid = 2; // 账户标识 ctp.InvestorID/st.cell_id
  string requestid = 3; // ctp接口请求标识
  string instrumentid = 4; // 合约代码 ctp.InstrumentID/st.sec_code
  string direction = 5; // 多空方向 ctp.PosiDirection/st.bs
  string hedgeflag = 6; // 投机套保标志 ctp.HedgeFlag/st.hedge_flag
  int32 preposition = 7; // 昨日总持仓 ctp.YdPosition/st.pre_total_vo
  int32 preholdposition = 8; // 昨日余仓	ctp.POSITION-ctp.TODAYPOSITION/st.PRE_REMAIN_VOL
  int32 todayholdposition = 9; // 今日余仓	ctp.TODAYPOSITION/st.TOTAL_VOL-st.PRE_REMAIN_VO
  int32 position = 10; // 今日总持仓 ctp.Position/st.TOTAL_VOL
  int32 openvolume = 11; // 今开仓量 ctp.OpenVolume/st.buy_vol
  int32 closevolume = 12; // 今平仓量 ctp.CloseVolume/st.sell_vol
  double openamount = 13; // 今开仓金额 ctp.OpenAmount/st.buy_done_amt
  double closeamount = 14; // 今平仓金额 ctp.CloseAmount/st.sell_done_a
  double opencost = 15; // 今开仓均价 (ctp.OpenAmount/ctp.OpenVolume
  double positioncost = 16; // 持仓成本 ctp.PositionCost/st.total_cost
  double premargin = 17; // 昨天占用的保证金 ctp.PreMargin/st.yd_usemargin
  double margin = 18; // 当前占用的保证金 ctp.UseMargin/st.total_margin
  double commission = 19; // 手续费包含开平仓
  double closeprofit = 20; // 盯日平仓盈亏
  double positionprofit = 21; // 盯日持仓盈亏
  double totalprofile = 22; // 累计实现盈亏
  string positiondate = 23; // 今仓昨仓 '1' '2' 默认今仓1
  string updatedate = 24; // 最新更新时间
  double leverage = 25;
  double level = 26;
}
